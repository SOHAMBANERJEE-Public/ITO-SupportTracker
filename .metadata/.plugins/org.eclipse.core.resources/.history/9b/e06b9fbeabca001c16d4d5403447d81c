package com.springboot.support.serviceimpl;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Optional;


import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.stereotype.Service;

import com.springboot.support.customdetailshow.TicketComments;
import com.springboot.support.customdetailshow.ViewAllTicketsDetails;
import com.springboot.support.customdetailshow.ViewTicketDetailsWithComment;
import com.springboot.support.entities.Admin;
import com.springboot.support.entities.Category;
import com.springboot.support.entities.Comments;
import com.springboot.support.entities.PriorityEntity;
import com.springboot.support.entities.StatusEntity;
import com.springboot.support.entities.SubCategory;
import com.springboot.support.entities.Tickets;
import com.springboot.support.entities.Users;
import com.springboot.support.repository.AdminRepository;
import com.springboot.support.repository.CategoryRepository;
import com.springboot.support.repository.CommentRepository;
import com.springboot.support.repository.PriorityRepository;
import com.springboot.support.repository.StatusRepository;
import com.springboot.support.repository.SubCategoryRepository;
import com.springboot.support.repository.TicketRepository;
import com.springboot.support.repository.UserRepository;
import com.springboot.support.services.TicketService;

/**
 * Ticket service implementation class for the service methods business logic.
 * 
 * @author Soham Banerjee
 *
 */
@Service
public class TicketServiceImpl  implements TicketService {

	@Autowired
	TicketRepository trepo;	
	@Autowired
	CommentRepository crepo;
	@Autowired
	UserRepository urepo;
	@Autowired
	CategoryRepository catrepo;
	@Autowired
	SubCategoryRepository scatrepo;
	@Autowired
	PriorityRepository priorepo;
	@Autowired
	AdminRepository adrepo;
	@Autowired
	CommentServiceImpl commentservice;
	@Autowired
	StatusRepository strepo;
	
	
	/**
	 * Method for creating tickets.
	 * 
	 * @param ticket holds the details of ticket.
	 * @param usrid holds the user id.
	 * @return String value for acknowledgement or error if any. 
	 */
	@Override
	public String createTicket(Tickets ticket,int usrid) {
		
		Optional<PriorityEntity> prio= priorepo.findById(ticket.getPriority_id());
		
		int  categoryId,subcategoryId;
		
		Category cate=catrepo.findById(ticket.getCategory_id());				
		SubCategory scat=scatrepo.findById(ticket.getSub_category_id());
		
		categoryId=cate.getCategory_id();
		subcategoryId=scat.getCategory_id();
		
		if(categoryId == subcategoryId && !prio.isEmpty()) {
		
		      Optional<Users> user=urepo.findById(usrid);
		      if(user.isEmpty()) {
			       return "Invalid User Id";
		        }
		      else {
		           ticket.setStatus_id(1);
		           ticket.setReported_Id(usrid);
		           ticket.setCreate_datetime(new Date());
		           ticket.setLast_modified_datetime(new Date());
		           trepo.save(ticket);
		           String url= "/tickets/viewticketsbyid?id="+ticket.getTicket_id();
		           return "Ticket created successfully \n"+url;
		        }
		}
		else {
			return "Invalid Category or Subcategory or priority";
		}
	}
	
	/**
	 * Method use for show all the existing tickets to admin.
	 * @return list of tickets.
	 */
	@Override
	public List<ViewAllTicketsDetails> viewAdmTicketList() {
		List<ViewAllTicketsDetails> customshow=new ArrayList<>();
		String  ticcategory="",ticsub_category="",priority;
		
	
		List<Tickets> tickets=trepo.findAll();
		if(tickets.isEmpty()) {
			return null;
			
			
		}else {
			
		for (Tickets i : tickets) {
			
			 StatusEntity s=strepo.findById(i.getStatus_id());
		     String status = s.getStatus_desc();
			
			Category cate=catrepo.findById(i.getCategory_id());				
			SubCategory scat=scatrepo.findById(i.getSub_category_id());
			
			ticcategory=cate.getCategory_desc();
			ticsub_category=scat.getSub_category_desc();
			
			Optional<PriorityEntity> p=priorepo.findById(i.getPriority_id());
			priority=p.get().getPrio_desc();
			String url= "/tickets/viewticketsbyid?id="+i.getTicket_id();
			
			customshow.add(new ViewAllTicketsDetails(i.getTicket_id(),ticcategory,ticsub_category,i.getAssignee_Id(),i.getSubject(),status,priority,url));
		}
		return customshow;
		
	}
	}
	
	/**
	 * Method for show a particular ticket by searching by its ticket id.
	 * 
	 * @param id holds the ticket id.
	 * @return the specific ticket or error message if any.
	 */
	
	@Override
    public Object viewTicketById(int id){
		
		Optional<Tickets> ticket=trepo.findById(id);
		String assignee="", ticcategory="",ticsub_category="",reporter,priority;
		String error="Invalid Ticket Id";
		
		if(!ticket.isEmpty()) {
		      Tickets t=ticket.get();
		      
		      StatusEntity s=strepo.findById(t.getStatus_id());
		      String status = s.getStatus_desc();
		      
		      List<Comments> c= crepo.findAll();
		      List<TicketComments> ticketComments=new ArrayList<>();
		      
		      
		      Category cate=catrepo.findById(t.getCategory_id());
		      ticcategory=cate.getCategory_desc();
		      
		      SubCategory scat=scatrepo.findById(t.getSub_category_id());
		      ticsub_category=scat.getSub_category_desc();
		      Optional<Users> user= urepo.findById(t.getAssignee_Id());
		      Optional<Users> user2= urepo.findById(t.getReported_Id());
		      reporter=user2.get().getUsr_name();
		
		      System.out.println(t.getPriority_id());
		      Optional<PriorityEntity> p=priorepo.findById(t.getPriority_id());
		      priority=p.get().getPrio_desc();
		
		    if(!user.isEmpty()) {
			        assignee=user.get().getUsr_name();
		    }
		       for (Comments i : c) {
		          if(i.getticketId()==t.getTicket_id())
			      {
				         Optional<Users> u=urepo.findById(i.getUserId());
				         Optional<Admin> ad=adrepo.findById(i.getUserId());
				         String userName="";
				
				         if(!u.isEmpty()) {
				                 userName=u.get().getUsr_name();
				         }
				         else {
				                 userName=ad.get().getAdmin_name();
					
				         }
				     ticketComments.add(new TicketComments(userName,i.getMessage()));
					
			      }
		       }
		   System.out.println(c);
		
		
		
		       ViewTicketDetailsWithComment vtdc=new ViewTicketDetailsWithComment(t.getTicket_id(),ticcategory,ticsub_category,assignee,reporter,t.getSubject(),t.getDescription(),status,priority,t.getCreate_datetime(),t.getLast_modified_datetime(),ticketComments);
       
		       return  vtdc;
		    }
		else
			return error;
	}
	
	/**
	 * Method for update the assignee.
	 * 
	 * @param ticid holds the ticket id.
	 * @param adminid hold the admin id.
	 * @param assign holds the user id for assigning.
	 * @return string value for acknowledgement or error message if any.
	 */

	@Override
    public String updateAssignee( int ticid, int adminid, int assign){
		Optional<Tickets> tickets= trepo.findById(ticid);
		Tickets t=tickets.get();
		
		Optional<Admin> admin=adrepo.findById(adminid);
		Optional<Users> old=urepo.findById(t.getAssignee_Id());
		Optional<Users> users=urepo.findById(assign);
		
		String newassignee,oldassignee=" ";
		
		if(t.getAssignee_Id()==0) {
			oldassignee="Unassigned";
		}
		else {
			oldassignee=old.get().getUsr_name();
		}
		
		if(tickets.isEmpty()) {
			return "Invalid Ticket Id..!";
		}
		else if(!admin.isEmpty()){
			
		newassignee= users.get().getUsr_name();		
		t.setAssignee_Id(assign);
		t.setLast_modified_datetime(new Date());
		trepo.save(t);
		return "Assignee id change from "+oldassignee+" to "+newassignee;
		}
		else {
			return "Admin Id Invalid..!";
		}
	}

	/**
	 * Method for update the status of a ticket.
	 * 
	 * @param ticid holds the ticket id.
	 * @param userid hold the user id.
	 * @param statusid holds the status id for assigning.
	 * @return string value for acknowledgement or error message if any.
	 */
	@Override
    public String updateStatus(int ticketid,int userid,int statusid){		
		Optional<Tickets> tickets= trepo.findById(ticketid);
		StatusEntity oldstat = strepo.findById(tickets.get().getStatus_id());
		StatusEntity newstat = strepo.findById(statusid);
		
		
		if(!tickets.isEmpty()){
		Tickets t=tickets.get();
		Users user= urepo.getById(userid);
		    if(user!=null) {
		    	 if(newstat!=null) {
		             t.setStatus_id(statusid);
		             t.setLast_modified_datetime(new Date());
		             return "update status from "+oldstat.getStatus_desc()+" to "+newstat.getStatus_desc();
		         }
		    	 else
		    		 return "Invalid Status Id";
		    }
		    else
		    	return "Invalid User Id..!";
		}
		else 
			return "Invalid Ticket Id..!";
			
		
	}


	/**
	 * Method for showing the list of all ticket of a particular user.
	 * 
	 * @param usrid holds the user id.
	 * @return list of all tickets or null.
	 */

	@Override
	public List<ViewAllTicketsDetails> viewUsrTicketList( int usrid) {
		List<ViewAllTicketsDetails> customshow=new ArrayList<>();
	
		String  ticcategory="",ticsub_category="", priority="";
		List<Tickets> tickets=trepo.findAll();      //Fetching all the tickets from database
		Optional<Users> user=urepo.findById(usrid);
		
		if(!user.isEmpty()) {
		    if(tickets.isEmpty()) {
		         	return null;
			}
		    else {
		 	
		          for (Tickets i : tickets) {
		        	  
		          if(i.getReported_Id()==usrid) {
		        	  
		        	    StatusEntity s=strepo.findById(i.getStatus_id());
		 		        String status = s.getStatus_desc();
		 		        
				        Category cate=catrepo.findById(i.getCategory_id());				
				        SubCategory scat=scatrepo.findById(i.getSub_category_id());
				        
				        ticcategory=cate.getCategory_desc();
				        ticsub_category=scat.getSub_category_desc();
				        
				        Optional<PriorityEntity> p=priorepo.findById(i.getPriority_id());
				        priority=p.get().getPrio_desc();
				
			      String url= "/tickets/viewticketsbyid?id="+i.getTicket_id();
			      customshow.add(new ViewAllTicketsDetails(i.getTicket_id(),ticcategory,ticsub_category,i.getAssignee_Id(),i.getSubject(),status,priority,url));
			      }
		        }
		      return customshow;
		
	        }
		}
		else
			return null;
	}
	
	


}
